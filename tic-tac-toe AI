EMPTY = ' '
HUMAN_PLAYER = 'X'
AI_PLAYER = 'O'


board = [
    [EMPTY, EMPTY, EMPTY],
    [EMPTY, EMPTY, EMPTY],
    [EMPTY, EMPTY, EMPTY]
]

def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-----')
    print()

def check_winner(board):
    
    for row in board:
        if all(cell == HUMAN_PLAYER for cell in row):
            return HUMAN_PLAYER
        if all(cell == AI_PLAYER for cell in row):
            return AI_PLAYER
    
    
    for col in range(3):
        if all(board[row][col] == HUMAN_PLAYER for row in range(3)):
            return HUMAN_PLAYER
        if all(board[row][col] == AI_PLAYER for row in range(3)):
            return AI_PLAYER
    
    
    if all(board[i][i] == HUMAN_PLAYER for i in range(3)):
        return HUMAN_PLAYER
    if all(board[i][i] == AI_PLAYER for i in range(3)):
        return AI_PLAYER
    if all(board[i][2-i] == HUMAN_PLAYER for i in range(3)):
        return HUMAN_PLAYER
    if all(board[i][2-i] == AI_PLAYER for i in range(3)):
        return AI_PLAYER
    
    
    if all(cell != EMPTY for row in board for cell in row):
        return 'Draw'
    
    return None

def minimax(board, depth, maximizing_player):
    winner = check_winner(board)
    if winner == AI_PLAYER:
        return 1
    elif winner == HUMAN_PLAYER:
        return -1
    elif winner == 'Draw':
        return 0
    
    if maximizing_player:
        max_eval = -float('inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == EMPTY:
                    board[row][col] = AI_PLAYER
                    eval = minimax(board, depth + 1, False)
                    board[row][col] = EMPTY
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == EMPTY:
                    board[row][col] = HUMAN_PLAYER
                    eval = minimax(board, depth + 1, True)
                    board[row][col] = EMPTY
                    min_eval = min(min_eval, eval)
        return min_eval

def ai_move(board):
    best_move = None
    best_eval = -float('inf')
    for row in range(3):
        for col in range(3):
            if board[row][col] == EMPTY:
                board[row][col] = AI_PLAYER
                eval = minimax(board, 0, False)
                board[row][col] = EMPTY
                if eval > best_eval:
                    best_eval = eval
                    best_move = (row, col)
    board[best_move[0]][best_move[1]] = AI_PLAYER

def human_move(board):
    while True:
        try:
            row = int(input("Enter the row (0-2): "))
            col = int(input("Enter the column (0-2): "))
            if board[row][col] == EMPTY:
                board[row][col] = HUMAN_PLAYER
                break
            else:
                print("That cell is already occupied! Try again.")
        except ValueError:
            print("Invalid input! Please enter a number.")

def main():
    current_player = HUMAN_PLAYER  # Start with human player
    while True:
        print_board(board)
        if current_player == HUMAN_PLAYER:
            human_move(board)
        else:
            ai_move(board)
        
        winner = check_winner(board)
        if winner:
            print_board(board)
            if winner == 'Draw':
                print("It's a draw!")
            else:
                print(f"{winner} wins!")
            break
        
        # Switch turns
        current_player = AI_PLAYER if current_player == HUMAN_PLAYER else HUMAN_PLAYER

if __name__ == "__main__":
    main()
